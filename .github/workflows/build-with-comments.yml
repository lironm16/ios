name: Build and Comment on PR

on:
  pull_request:

permissions:
  pull-requests: write  # Allows the workflow to post comments on PRs
  contents: read        # Grants read-only access to the repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Mock a build result (replace with your actual build steps)
      - name: Mock Build Result
        id: build
        run: |
          echo "build_result=failure" >> $GITHUB_OUTPUT

      # Step 2: Check for existing comments on the PR
      - name: Check for Existing Comments
        id: check-comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentTag = '<!-- build-status-comment -->'; // Tag to identify the comment
            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Find the comment with the unique tag
            const duplicateComment = existingComments.data.find(comment =>
              comment.body.includes(commentTag)
            );

            if (duplicateComment) {
              core.setOutput('comment_id', duplicateComment.id);
              console.log(`Found comment with ID: ${duplicateComment.id}`);
            } else {
              core.setOutput('comment_id', '');
              console.log('No existing comment found.');
            }

      # Step 3: Post or update comment if the build fails
      - name: Post or Update Failure Comment
        if: steps.build.outputs.build_result == 'failure'
        uses: actions/github-script@v6
        env:
          COMMENT_BODY: ${{ steps.check-comments.outputs.comment_body }}
          COMMENT_ID: ${{ steps.check-comments.outputs.comment_id }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentTag = '<!-- build-status-comment -->'; // Tag to identify the comment
            if (process.env.COMMENT_ID) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: process.env.COMMENT_ID,
                body: `${commentTag}\n${process.env.COMMENT_BODY}`,
              });
              console.log(`Updated comment with ID: ${process.env.COMMENT_ID}`);
            } else {
              // Create new comment
              const result = await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER,
                body: `${commentTag}\n${process.env.COMMENT_BODY}`,
              });
              console.log(`Created new comment with ID: ${result.data.id}`);
            }

      # Step 4: Remove Comment if Build Passes
      - name: Remove Comment if Build Passes
        if: steps.build.outputs.build_result == 'success' && steps.check-comments.outputs.comment_id != ''
        uses: actions/github-script@v6
        env:
          COMMENT_ID: ${{ steps.check-comments.outputs.comment_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (process.env.COMMENT_ID) {
              console.log(`Attempting to delete comment with ID: ${process.env.COMMENT_ID}`);
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: process.env.COMMENT_ID,
              });
              console.log(`Deleted comment with ID: ${process.env.COMMENT_ID}`);
            }
