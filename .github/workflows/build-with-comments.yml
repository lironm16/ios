name: Build and Comment on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write  # Allows the workflow to post comments on PRs
  contents: read        # Grants read-only access to the repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Mock a build result (replace with your actual build steps)
      - name: Mock Build Result
        id: build
        run: |
          # Simulate a build (50% chance of success or failure for POC)
          if [ $((RANDOM % 2)) -eq 0 ]; then
            echo "The build result is: success"
            echo "build_result=success" >> $GITHUB_OUTPUT
          else
            echo "The build result is: failure"
            echo "build_result=failure" >> $GITHUB_OUTPUT
          fi

      # Step 2: Check for existing comments on the PR
      - name: Check for Existing Comments
        id: check-comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `ðŸš¨ The build has failed! Please check the logs. Target branch: \`${context.payload.pull_request.base.ref}\` You can view the workflow details [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            `.trim();

            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            const duplicateComment = existingComments.data.find(comment =>
              comment.body === commentBody
            );

            if (duplicateComment) {
              core.setOutput("comment_id", duplicateComment.id);
            } else {
              core.setOutput("comment_id", "");
            }
            core.setOutput("comment_body", commentBody);

      # Step 3: Post or update comment if the build fails
      - name: Post New Comment
        if: steps.build.outputs.build_result == 'failure' && steps.check-comments.outputs.comment_id == ''
        uses: actions/github-script@v6
        env:
          COMMENT_BODY: ${{ steps.check-comments.outputs.comment_body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER,
              body: process.env.COMMENT_BODY,
            });


      - name: Update Existing Comment
        if: steps.build.outputs.build_result == 'failure' && steps.check-comments.outputs.comment_id != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: steps['check-comments'].outputs.comment_id,
              body: steps['check-comments'].outputs.comment_body,
            });

      # Step 4: Remove comment if the build passes
      - name: Remove Comment if Build Passes
        if: steps.build.outputs.build_result == 'success' && steps.check-comments.outputs.comment_id != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: steps['check-comments'].outputs.comment_id,
            });
