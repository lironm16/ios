name: Build and Comment on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write  # Allows the workflow to post comments on PRs
  contents: read        # Grants read-only access to the repository contents

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Mock a build result (replace with your actual build steps)
      - name: Mock Build Result
        id: build
        run: |
          # Simulate a build (50% chance of success or failure for POC)
          # if [ $((RANDOM % 2)) -eq 0 ]; then
          #   echo "The build result is: success"
          #   echo "build_result=success" >> $GITHUB_OUTPUT
          # else
          #   echo "The build result is: failure"
          #   echo "build_result=failure" >> $GITHUB_OUTPUT
          # fi
          echo "build_result=failure" >> $GITHUB_OUTPUT

      # Step 2: Check for existing comments on the PR
      - name: Check for Existing Comments
        id: check-comments
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `ðŸš¨ The build has failed! Please check the logs. Target branch: \`${context.payload.pull_request.base.ref}\` You can view the workflow details [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            `.trim();

            const existingComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Check for an existing comment with the same content
            const duplicateComment = existingComments.data.find(comment =>
              comment.body.startsWith("ðŸš¨ The build has failed!")
            );

            if (duplicateComment) {
              core.setOutput("comment_id", duplicateComment.id);
            } else {
              core.setOutput("comment_id", "");
            }
            core.setOutput("comment_body", commentBody);

      # Step 3: Post or update comment if the build fails
      - name: Post or Update Failure Comment
        if: steps.build.outputs.build_result == 'failure'
        uses: actions/github-script@v6
        env:
          COMMENT_BODY: ${{ steps.check-comments.outputs.comment_body }}
          COMMENT_ID: ${{ steps.check-comments.outputs.comment_id }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (process.env.COMMENT_ID) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: process.env.COMMENT_ID,
                body: process.env.COMMENT_BODY,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER,
                body: process.env.COMMENT_BODY,
              });
            }

      # Step 4: Update the PR title with a badge
- name: Manage Warning Badge in PR Description
        if: steps.build.outputs.build_result == 'failure' || steps.build.outputs.build_result == 'success'
        uses: actions/github-script@v6
        env:
          BUILD_RESULT: ${{ steps.build.outputs.build_result }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const warningBadge = '![Build Status](https://img.shields.io/badge/Build-Warning-yellow)';

            // Fetch the current PR details
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: process.env.PR_NUMBER,
            });

            let updatedBody = pullRequest.body || ''; // Handle null body as empty string

            // Remove any existing badge from the description
            updatedBody = updatedBody.replace(/!\[Build Status\]\([^)]+\)\s*/, '');

            if (process.env.BUILD_RESULT === 'failure') {
              // Prepend warning badge to the description
              updatedBody = `${warningBadge}\n\n${updatedBody}`;
            }

            // Update the PR description only if it has changed
            if (updatedBody.trim() !== (pullRequest.body || '').trim()) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: process.env.PR_NUMBER,
                body: updatedBody.trim(),
              });
            }
            
      # Step 4: Remove Comment if Build Passes
      - name: Remove Comment if Build Passes
        if: steps.build.outputs.build_result == 'success' && steps.check-comments.outputs.comment_id != ''
        uses: actions/github-script@v6
        env:
          COMMENT_ID: ${{ steps.check-comments.outputs.comment_id }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env.COMMENT_ID,
            });
