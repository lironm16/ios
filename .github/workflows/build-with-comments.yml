name: Build and Comment Workflow

on:
  pull_request:

jobs:
  mock-build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Mock a build result
      - name: Mock Build Result
        id: build
        run: |
          # Simulate a build (50% chance of success or failure for POC)
          if [ $((RANDOM % 2)) -eq 0 ]; then
            echo "build_result=success" >> $GITHUB_OUTPUT
          else
            echo "build_result=failure" >> $GITHUB_OUTPUT
          fi

      # Step 2: Check for previous comments
      - name: Check Previous Comments
        id: comment_check
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require("@actions/github");
            const commentBody = `
ðŸš¨ This PR contains **breaking changes** for Android!

Target branch: \`${context.payload.pull_request.base.ref}\`

You can view the workflow details [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).
            `.trim();

            const existingComments = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
            });

            // Check for duplicate comments
            const duplicateComment = existingComments.data.find(comment =>
              comment.body === commentBody
            );

            if (duplicateComment) {
              core.setOutput("comment_id", duplicateComment.id);
            } else {
              core.setOutput("comment_id", "");
            }
            core.setOutput("comment_body", commentBody);
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Post or update comment if build fails
      - name: Post or Update Comment
        if: steps.build.outputs.build_result == 'failure' && steps.comment_check.outputs.comment_id == ''
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require("@actions/github");
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: steps.comment_check.outputs.comment_body,
            });
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Existing Comment
        if: steps.build.outputs.build_result == 'failure' && steps.comment_check.outputs.comment_id != ''
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require("@actions/github");
            await github.rest.issues.updateComment({
              ...context.repo,
              comment_id: steps.comment_check.outputs.comment_id,
              body: steps.comment_check.outputs.comment_body,
            });
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Remove comment and badge if build passes
      - name: Remove Comment and Badge if Build Passes
        if: steps.build.outputs.build_result == 'success' && steps.comment_check.outputs.comment_id != ''
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require("@actions/github");
            // Delete the existing comment
            await github.rest.issues.deleteComment({
              ...context.repo,
              comment_id: steps.comment_check.outputs.comment_id,
            });

            // Additional logic to update/remove badge can go here
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
